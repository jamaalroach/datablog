[
  {
    "path": "posts/k_means_clustering/",
    "title": "K Means Clustering",
    "description": "Using k means clsutering to see which countris vote similarly in the UN general assembly",
    "author": [
      {
        "name": "Jamaal Roach",
        "url": {}
      }
    ],
    "date": "2021-04-02",
    "categories": [],
    "contents": "\r\nUNSUPERVISED LEARNING\r\nusing UN votes package\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(unvotes)\r\nlibrary(cluster)\r\nlibrary(factoextra)\r\nlibrary(ggthemes)\r\nlibrary(ggrepel)\r\nlibrary(rnaturalearth)\r\nlibrary(sf)\r\nlibrary(countrycode)\r\n\r\n\r\n\r\n\r\n\r\n\r\nK MEANS CLUSTERING\r\nThings to note\r\nclustering is on numerical data only\r\ndata needs to be in a wide format.\r\nscale date to normal distribution\r\n\r\n\r\n\r\n# data needs to be ina  wide format\r\ncluster_data<-vote_data%>%pivot_wider(names_from = rcid, values_from = vote_n, values_fill = 0, names_prefix=\"rcid_\") \r\n\r\n\r\n#data needs to be all numerical , country variable changed to a rowname\r\ncluster_data<-column_to_rownames(cluster_data, var=\"country\") \r\n\r\n\r\n#scaling data to have a standard nor mal distribution i.e mean = 0, var = 1. required for clustering algorithm\r\ncluster_data<-scale(cluster_data) \r\n\r\n\r\n#run K means algorithm \r\nset.seed(0)\r\nvote_cluster<-kmeans(cluster_data, 3, nstart = 20)\r\n\r\n\r\n\r\n\r\n\r\nfviz_cluster(\r\n  vote_cluster,\r\n  data = cluster_data,\r\n  geom = \"point\",\r\n  ellipse = FALSE,\r\n  show.clust.cent = FALSE,\r\n  shape=1,\r\n  pointsize = 2.5,\r\n  alpha = .6,\r\n  \r\n)+\r\n  #geom_point( colour=as.factor(v$cari),\r\n  #fill=as.factor(v$cari))+\r\n  #geom_mark_ellipse(aes(group=cluster),colour=\"grey\")+\r\n  geom_text_repel(label=rownames(cluster_data),  hjust=\"inward\")+\r\n  labs(title=\"TEST\", caption = \"UNVOTES\")+\r\n  theme_fivethirtyeight()+\r\n  coord_cartesian(clip = \"off\")+\r\n  theme(plot.title.position = \"panel\")\r\n\r\n\r\n\r\n\r\n\r\n\r\ncluster_data<-as.data.frame(cluster_data)\r\ncluster_data$cluster<-vote_cluster$cluster\r\nplot_data<-cluster_data%>%select(cluster)\r\nplot_data$country<-rownames(plot_data)\r\nplot_data$cluster<-as.factor(plot_data$cluster)\r\nplot_data$region<-plot_data$country\r\n\r\n\r\n\r\n## get natural earth mapping data in dataframe format\r\n\r\nworld_ne<-ne_countries(scale=\"medium\", returnclass = \"sf\")   \r\n\r\n\r\n#uses country code package to get country 1so2 code , required to merge with natural earth mapping data\r\n\r\nplot_data$iso_a2<-countrycode(plot_data$country, \"country.name\", \"iso2c\") \r\n\r\n#merges mapping data with plotting data\r\nplot_data<-merge(world_ne, plot_data, \"iso_a2\") \r\n\r\n\r\n\r\n\r\n\r\nbloc_plot<-\r\n  ggplot(plot_data)+\r\n  geom_sf(aes(fill=cluster),colour=\"#2a3135\", alpha=.6, size=.4)+\r\n  coord_sf()+\r\n  theme_map()+\r\n  labs(title = \"VOTING BLOCS\",\r\n       subtitle = \"Cluster analysis of UN General Assembly votes 2000 - 2019\",\r\n       caption=\"#TidyTuesday | Source: UN Votes, Harvard Dataverse \\n @jamaalroach\")+\r\n  scale_fill_discrete(name=\"BLOCS Include:\", \r\n                      labels=c(\"\\n Most of the world\\n \", \r\n                                \"Canada, Europe, \\nAustrailia, Japan, New Zealand...\",\r\n                               \"\\nUS, Central Africa, \\n Israel, Macedonia...\"),\r\n                      type =c(\"#6da7de\",\"#dee000\", \"#63193b\" ) \r\n                      )+\r\n  theme(legend.background = element_rect(fill=\"#2a3135\", colour = \"#2a3135\"),\r\n        legend.text = element_text(colour=\"#dddddd\", size=10),\r\n        legend.key = element_rect(fill=\"#2a3135\"),\r\n        legend.title = element_text(colour = \"#dddddd\", size=10\r\n        ),\r\n        plot.title.position = \"plot\",\r\n        plot.subtitle = element_text(colour=\"#dddddd\", size=14),\r\n        plot.caption = element_text(colour=\"#dddddd\", size=8),\r\n        plot.caption.position = \"plot\",\r\n        plot.title = element_text(face=\"bold\", colour=\"#dddddd\", size = 16),\r\n        panel.background = element_rect(fill=\"#2a3135\",colour=\"#2a3135\"),\r\n        plot.background = element_rect(fill=\"#2a3135\", colour=\"#2a3135\"),\r\n        plot.margin = margin(25,25,10,25))\r\n\r\n\r\nggsave(bloc_plot, filename = \"bloc_plot.png\", units = \"in\", width = 11, height = 8.5)\r\n\r\n\r\n\r\nwhat\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/k_means_clustering/\\bloc_plot.png",
    "last_modified": "2021-04-14T13:46:09-04:00",
    "input_file": "index.utf8.md",
    "preview_width": 3300,
    "preview_height": 2550
  },
  {
    "path": "posts/prediction_linear_regression/",
    "title": "Linear Regression Modelling & Prediction",
    "description": "Using linear regression to predict house prices using Kaggle AMES Data Set",
    "author": [
      {
        "name": "Jamaal Roach",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2021-04-02",
    "categories": [],
    "contents": "\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(statsr)\r\nlibrary(dplyr)\r\nlibrary(BAS)\r\nlibrary(broom)\r\nlibrary(recipes) #for preprocesing data\r\nlibrary(naniar)  # for assessing and vicualising NAs/ missing data\r\nlibrary(ggthemes)\r\nlibrary(janitor) # for cleaning variable names\r\nlibrary(tidymodels)\r\n\r\n\r\n\r\n\r\n\r\n\r\nVariables with the most NA\r\n\r\n\r\ngg_miss_var(train_data%>%select_if(~sum(is.na(.))>0))+theme_fivethirtyeight()\r\n\r\n\r\n\r\n\r\n\r\n\r\nall_data<-bind_rows(train_data, test_data)%>%clean_names()\r\n\r\n\r\n\r\n\r\n\r\n#preprocessing\r\n\r\names_recipe<- all_data %>%\r\n  recipe(sale_price ~x1st_flr_sf + lot_area + overall_qual + overall_cond + \r\n           age + exter_qual + bedroom_abv_gr + garage_cars + central_air + ms_zoning + \r\n           neighborhood + condition1+ bldg_type + house_style + bsmt_qual + exter_cond + \r\n           bsmt_fin_sf1 + heating + kitchen_qual+ fireplaces + sale_condition) %>%\r\n  step_log(sale_price) %>%  #sets log transformation for variables\r\n  step_modeimpute(all_nominal()) %>% # imputes mode for missing observations for all nominal variables\r\n  step_dummy(all_nominal()) %>% #creates dummy (binary term) variables for levels of nominal variables (character or factors)\r\n  step_meanimpute(all_predictors())%>% #substitues missing values of numerical independent variables for the training data average of the variable\r\n  step_normalize(all_predictors()) %>% # normalises numeric data to stand normal distribution i.e mean =0, sd = 1\r\n  prep(training = all_data)\r\n\r\n\r\n\r\n\r\n\r\names_recipe\r\n\r\n\r\nData Recipe\r\n\r\nInputs:\r\n\r\n      role #variables\r\n   outcome          1\r\n predictor         21\r\n\r\nTraining data contained 2919 data points and 1496 incomplete rows. \r\n\r\nOperations:\r\n\r\nLog transformation on sale_price [trained]\r\nMode Imputation for exter_qual, central_air, ... [trained]\r\nDummy variables from exter_qual, central_air, ... [trained]\r\nMean Imputation for x1st_flr_sf, lot_area, ... [trained]\r\nCentering and scaling for x1st_flr_sf, lot_area, ... [trained]\r\n\r\n\r\n\r\nall_data2<-juice(ames_recipe) # saves preprocessed dataset\r\n\r\n\r\n\r\n\r\n\r\ntrain_index <- seq_len(nrow(train_data)) #sets index of first number of rows euqlling original training data \r\ntrain_data2<-all_data2[train_index,] # dataframe of original trainign data after preprocessing\r\ntest_data2<-all_data2[-train_index,]# dataframe of original testing data after preprocessing\r\n\r\n\r\n\r\n\r\n\r\n## linear regression and model fitting \r\n\r\nlm_model<-\r\n  linear_reg()%>%\r\n  set_engine(\"lm\")\r\n\r\nlm_form_fit<-lm_model%>%\r\n  fit(sale_price ~., data=train_data2)\r\n\r\n\r\n\r\n\r\n\r\nlm_form_fit\r\n\r\n\r\nparsnip model object\r\n\r\nFit time:  10ms \r\n\r\nCall:\r\nstats::lm(formula = sale_price ~ ., data = data)\r\n\r\nCoefficients:\r\n           (Intercept)             x1st_flr_sf  \r\n            12.0171924               0.0913263  \r\n              lot_area            overall_qual  \r\n             0.0103728               0.0876437  \r\n          overall_cond                     age  \r\n             0.0463650              -0.0568076  \r\n        bedroom_abv_gr             garage_cars  \r\n             0.0261754               0.0538897  \r\n          bsmt_fin_sf1              fireplaces  \r\n             0.0282815               0.0265353  \r\n         exter_qual_Fa           exter_qual_Gd  \r\n             0.0037752               0.0121912  \r\n         exter_qual_TA           central_air_Y  \r\n             0.0036705               0.0236778  \r\n          ms_zoning_FV            ms_zoning_RH  \r\n             0.0739212               0.0321528  \r\n          ms_zoning_RL            ms_zoning_RM  \r\n             0.1377713               0.1051792  \r\n  neighborhood_Blueste     neighborhood_BrDale  \r\n            -0.0037587              -0.0106978  \r\n  neighborhood_BrkSide    neighborhood_ClearCr  \r\n            -0.0068831               0.0117701  \r\n  neighborhood_CollgCr    neighborhood_Crawfor  \r\n            -0.0001685               0.0193183  \r\n  neighborhood_Edwards    neighborhood_Gilbert  \r\n            -0.0264842              -0.0036180  \r\n   neighborhood_IDOTRR    neighborhood_MeadowV  \r\n            -0.0108528              -0.0166686  \r\n  neighborhood_Mitchel      neighborhood_NAmes  \r\n            -0.0091125              -0.0118900  \r\n  neighborhood_NoRidge    neighborhood_NPkVill  \r\n             0.0216270              -0.0048218  \r\n  neighborhood_NridgHt     neighborhood_NWAmes  \r\n             0.0251363              -0.0071388  \r\n  neighborhood_OldTown     neighborhood_Sawyer  \r\n            -0.0214307              -0.0087381  \r\n  neighborhood_SawyerW    neighborhood_Somerst  \r\n            -0.0038156               0.0101136  \r\n  neighborhood_StoneBr      neighborhood_SWISU  \r\n             0.0227237              -0.0048484  \r\n   neighborhood_Timber    neighborhood_Veenker  \r\n             0.0011838               0.0102085  \r\n      condition1_Feedr         condition1_Norm  \r\n             0.0007327               0.0223749  \r\n       condition1_PosA         condition1_PosN  \r\n             0.0059767               0.0040712  \r\n       condition1_RRAe         condition1_RRAn  \r\n            -0.0059576               0.0071301  \r\n       condition1_RRNe         condition1_RRNn  \r\n             0.0014000               0.0035504  \r\n     bldg_type_X2fmCon        bldg_type_Duplex  \r\n             0.0018260              -0.0098788  \r\n       bldg_type_Twnhs        bldg_type_TwnhsE  \r\n            -0.0242331              -0.0181755  \r\n   house_style_X1.5Unf     house_style_X1Story  \r\n            -0.0092653              -0.0543024  \r\n   house_style_X2.5Fin     house_style_X2.5Unf  \r\n             0.0078434               0.0081756  \r\n   house_style_X2Story      house_style_SFoyer  \r\n             0.0138471              -0.0137456  \r\n      house_style_SLvl            bsmt_qual_Fa  \r\n            -0.0148076              -0.0208669  \r\n          bsmt_qual_Gd            bsmt_qual_TA  \r\n            -0.0352131              -0.0535737  \r\n         exter_cond_Fa           exter_cond_Gd  \r\n            -0.0306895              -0.0404119  \r\n         exter_cond_Po           exter_cond_TA  \r\n            -0.0083505              -0.0463085  \r\n          heating_GasA            heating_GasW  \r\n             0.0143503               0.0214508  \r\n          heating_Grav            heating_OthW  \r\n            -0.0011440               0.0031010  \r\n          heating_Wall         kitchen_qual_Fa  \r\n             0.0049509              -0.0166852  \r\n       kitchen_qual_Gd         kitchen_qual_TA  \r\n            -0.0306165              -0.0506009  \r\nsale_condition_AdjLand   sale_condition_Alloca  \r\n             0.0077301               0.0046788  \r\n sale_condition_Family   sale_condition_Normal  \r\n             0.0001419               0.0256748  \r\nsale_condition_Partial  \r\n             0.0241782  \r\n\r\n\r\n\r\n##prediction\r\n\r\nresult<-predict(lm_form_fit, test_data2)\r\nresult$SalePrice<-exp(result$.pred)\r\n\r\n\r\n\r\n\r\n\r\nsubmission<-read.csv(\"sample_submission.csv\")\r\nsubmission$SalePrice<-result$SalePrice\r\nwrite.csv(submission, \"submission.csv\", row.names = FALSE)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/prediction_linear_regression/\\house.png",
    "last_modified": "2021-04-12T22:47:41-04:00",
    "input_file": {},
    "preview_width": 576,
    "preview_height": 357
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to My Blog",
    "description": "Welcome to our new blog, My Blog. We hope you enjoy \nreading what we have to say!",
    "author": [
      {
        "name": "Nora Jones",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2021-04-02",
    "categories": [],
    "contents": "\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-04-02T13:15:16-04:00",
    "input_file": {}
  }
]
